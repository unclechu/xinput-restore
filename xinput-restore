#!/bin/bash
#================================================================#
# Version : 0.3                                                  #
# Author  : Viacheslav Lotsmanov                                 #
# License : GNU/GPLv3 (https://www.gnu.org/licenses/gpl-3.0.txt) #
#================================================================#

[ "x$CONFIGS_PATH" == "x" ] && CONFIGS_PATH="$HOME/.xinput-saved-props"

mkdir -p "$CONFIGS_PATH"

trim () {
	while read line; do
		echo "$line" | sed -e "s/^\s\+\|\s\+$//g"
	done
}

# $1 - props
get-product-id () {
	
	local product_id=
	
	# parse device id prop
	product_id=$(echo "$1" | grep -i 'Device Product ID')
	[ $? -ne 0 ] && return $?
	product_id=$(echo $product_id | head -n1 | grep -o ':.*$')
	[ $? -ne 0 ] && return $?
	
	echo "${product_id:1}" | trim
	return 0
}

# $1 - file name or device product id
get-props-filename () {
	
	local in=$1
	local product_id=
	local found=false
	local props=
	local out_file=
	
	local files_list=$(ls "$CONFIGS_PATH/"*)
	[ $? -ne 0 ] && { echo "Cannot get files list" 1>&2; return 1; }
	local count=$[$(echo "$files_list" | wc -l)]
	local seq=$(seq $count)
	
	for i in $seq; do
		
		local file=$(echo "$files_list" | head -n $i | tail -n 1 | trim)
		
		# is file
		if [[ "x$in" == "x$(basename "$file")" ]] && [[ -f "$file" ]]; then
			found=true
			break
		fi
	done
	
	# when $in is file
	if [ $found == true ]; then
		
		out_file=$in
		found=true
		
	# when $in is device product id or file not found
	else
		for i in $seq; do
			
			local file=$(echo "$files_list" | head -n $i | tail -n 1 | trim)
			
			[ ! -f "$file" ] && continue
			
			props=$(cat "$file")
			[ $? -ne 0 ] && { echo "Cannot read file '$in'." 1>&2; return 1; }
			
			product_id=$(get-product-id "$props")
			[ $? -ne 0 ] && { echo "Cannot get product id by file '$file'." 1>&2; return 1; }
			
			if [ "x$in" == "x$product_id" ]; then
				out_file=$(basename "$file")
				found=true
				break
			fi
		done
	fi
	
	if [ $found == false ]; then
		echo "Device by '$in' not found." 1>&2
		return 1
	fi
	
	echo "$out_file"
	return 0
}

# $1 - file name
get-props () {
	
	local filename=$1
	local props=$(cat "$CONFIGS_PATH/$filename")
	[ $? -ne 0 ] && { echo "Cannot read file '$filename'." 1>&2; return 1; }
	
	echo "$props"
	return 0
}

# $1 - id of `xinput list`
# $2 (optional) - name of file
save () {
	
	local in_id=$(echo "$1" | trim)
	local in_name=$(echo "$2" | trim)
	
	echo "Saving device properties by id '$in_id'..."
	
	local prefix='Device '
	local filename=
	local props=
	
	# required arg validate
	[ "x$in_id" == "x" ] && { echo "No id of device." 1>&2; return 1; }
	
	echo "$in_id" | grep '^[0-9]\+$' &>/dev/null
	[ $? -ne 0 ] && { echo "Incorrect device id: '$in_id'." 1>&2; return 1; }
	
	# check in ids list
	xinput list --id-only | grep "^${in_id}$" &>/dev/null
	[ $? -ne 0 ] && { echo "Device not found by id '$in_id'." 1>&2; return 1; }
	
	# get all props to variable
	props=$(xinput list-props "$in_id")
	[ $? -ne 0 ] && { echo "Cannot get device properties by id '$in_id'." 1>&2; return 1; }
	
	# get filename from args or from device name
	if [ "x$in_name" != "x" ]; then
		filename=$in_name
	else
		filename=$(echo "$props" | grep -io "^$prefix'[^']\+'")
		[ $? -ne 0 ] && { echo "Cannot get device name by id '$in_id'." 1>&2; return 1; }
		
		filename=$(echo "${filename:$[${#prefix}+1]:-1}" | trim)
		[ "x$filename" == 'x' ] && { echo "Cannot get device name by id '$in_id'." 1>&2; return 1; }
	fi
	
	local dest="$CONFIGS_PATH/$filename"
	
	# remove old saved props by this product id
	local props=$(xinput list-props "$in_id")
	[ $? -ne 0 ] && { echo "Cannot get properties by id '$in_id'." 1>&2; return 1; }
	local product_id=$(get-product-id "$props")
	[ $? -ne 0 ] && { echo "Cannot get product id by id '$in_id'." 1>&2; return 1; }
	local files_list=$(ls "$CONFIGS_PATH/"*)
	[ $? -ne 0 ] && { echo "Cannot get files list" 1>&2; return 1; }
	local count=$[$(echo "$files_list" | wc -l)]
	local seq=$(seq $count)
	for i in $seq; do
		
		local item_file=$(echo "$files_list" | head -n $i | tail -n 1 | trim)
		
		[ ! -f "$item_file" ] && continue
		
		local item_props=$(cat "$item_file")
		[ $? -ne 0 ] && { echo "Cannot read file '$in'." 1>&2; return 1; }
		
		local item_product_id=$(get-product-id "$item_props")
		[ $? -ne 0 ] && { echo "Cannot get product id by file '$item_file'." 1>&2; return 1; }
		
		if [ "x$item_product_id" == "x$product_id" ]; then
			echo "Removing old saved properties file '$item_file'..."
			rm "$item_file"
			[ $? -ne 0 ] && { echo "Cannot remove old saved properties file '$item_file'." 1>&2; return 1; }
		fi
	done
	
	# save properties to file
	xinput list-props "$in_id" > "$dest"
	[ $? -ne 0 ] && { echo "Cannot save properties to file '$dest'." 1>&2; return 1; }
	
	echo "Properties are saved to file '$dest'."
	
	return 0
}

# $1 - file name or device product id
restore () {
	
	local in=$(basename "$1" | trim)
	local devices=()
	local devices_ids=$(xinput list --id-only)
	local props_filename=$(get-props-filename "$in")
	
	echo "Restoring device properties by '$in'..."
	
	# required arg validate
	[ "x$in" == "x" ] && { echo "No id of device." 1>&2; return 1; }
	
	local props=$(get-props "$props_filename")
	[ $? -ne 0 ] && { echo "Cannot restore device properties by '$in'."; return 1; }
	
	local product_id=$(get-product-id "$props")
	[ $? -ne 0 ] && { echo "Cannot get product id by '$1'." 1>&2; return 1; }
	
	for i in $(seq $[$(echo "$devices_ids" | wc -l)]); do
		
		local id=$(echo "$devices_ids" | head -n $i | tail -n 1 | trim)
		local item_product_id=$(get-product-id "$(xinput list-props "$id")")
		[ $? -ne 0 ] && continue
		
		if [ "x$item_product_id" == "x$product_id" ]; then
			devices[${#devices[@]}]=$id
		fi
	done
	
	if [ $[${#devices[@]}] -le 0 ]; then
		echo "Device not found by '$in'." 1>&2
		return 1
	fi
	
	echo "$props" | while read prop; do
		
		local prop=$(echo "$prop" | sed 's/#.*$//g' | trim)
		[ "x$prop" == "x" ] && continue
		
		local prop_left_part=$(echo "$prop" | grep -io '^[a-z0-9 ]\+([0-9]\+):')
		if [[ $? -ne 0 ]] || [[ "x$prop_left_part" == "x" ]]; then
			continue
		fi
		
		local prop_num=$(echo "$prop_left_part" | grep -o '([0-9]\+)')
		prop_num=${prop_num:1:-1}
		
		local prop_val=$(echo "${prop:${#prop_left_part}}" | trim)
		if [[ $? -ne 0 ]] || [[ "x$prop_val" == "x" ]]; then
			continue
		fi
		
		for id in "${devices[@]}"; do
			xinput set-prop "$id" "$prop_num" "$prop_val" &>/dev/null
		done
	done
	
	echo "Properties are restored from file '$props_filename'."
	return 0
}

restore-all () {
	
	echo "Restoring all saved properties..."
	
	ls "$CONFIGS_PATH/"* | while read file; do
		[ ! -f "$file" ] && continue
		restore "$file"
	done
	
	echo "Restoring properties complete."
	return 0
}

case "$1" in
	
	--save)
		if [ "x$3" != 'x' ]; then
			save "$2" "$3"
		else
			save "$2"
		fi
		exit $?
		;;
	
	--restore)
		restore "$2"
		exit $?
		;;
	
	--restore-all)
		restore-all
		exit $?
		;;
	
	'')
		restore-all
		exit $?
		;;
	
	*)
		echo "Unknown argument: '$1'" 1>&2
		exit 1
		;;
esac
